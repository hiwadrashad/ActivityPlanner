@page "/addacquaintances"
    @using ActivityPlannerBlazor.Client.Interfaces;
    @using ActivityPlannerBlazor.Shared.DTOS;
    @using Microsoft.AspNetCore.Components;
    @using System;
    @using System.Collections.Generic;
    @using System.Linq;
    @using System.Threading.Tasks;
@using Microsoft.Extensions.Logging;
@inject ILogger<AddAcquaintances> logger
    <style>
        .modelimage {
            position: fixed !important;
        }

        body {
            overflow-x: hidden;
        }

        nav {
            transform: translateY(15px);
        }

        @@media screen and (min-width: 1367px) {

            body {
                min-width: 1680px;
            }

            .scaleeverything {
                width: 105% !important;
                position: relative !important;
                transform: scale(1.2);
                transform: translate(-50px,-19px);
            }

            .wrap-contact2 {
                transform: scale(0.7) !important;
            }
        }

        @@media screen and (max-width: 1367px) {
            body {
                min-width: 1367px;
            }

            .scaleeverything {
                width: 105% !important;
                position: relative !important;
                transform: scale(1.05) translateY(-100px);
                transform: translate(-50px,-19px);
            }

            .wrap-contact2 {
                transform: scale(0.65) !important;
            }
        }

        .sidenav {
            font-family: 'Roboto', sans-serif;
            opacity: 0.9;
            margin-left: 250px;
            margin-top: 50px;
            height: 400px !important;
            width: 200px;
            position: fixed !important;
            z-index: 1;
            top: 0;
            left: 0;
            background-color: #111;
            overflow-x: hidden;
            padding-top: 20px;
        }

            .sidenav a {
                padding: 10px 10px 10px 10px;
                text-decoration: none;
                display: block;
            }

                .sidenav a:hover {
                    color: #f1f1f1;
                }

        @@media screen and (max-height: 450px) {
            .sidenav {
                padding-top: 15px;
            }

                .sidenav a {
                    font-size: 18px;
                }
        }

        @@media screen and (min-width: 1367px) {
            .sidenav {
                overflow: hidden;
                margin-top: 100px;
                transform: translateX(-200px) !important;
            }

            .scaleeverything {
                transform: scale(1.5) translateX(-150px);
            }

            .modelimage {
                transform: scale(.5) translate(1700px,-1200px);
                /*            transform: scale(1.14) translate(1100px,-50px);*/
            }
        }

        @@media screen and (max-width: 1367px) {
            .sidenav {
                overflow: hidden;
                margin-top: 120px;
                margin-left: 20px;
            }

            .scaleeverything {
                transform: scale(1.3) translate(-100px, -100px);
            }

            .modelimage {
                transform: scale(0.5) translate(1100px,-1200px);
                position: fixed !important;
            }
        }

        .copyrights {
            color: #818181;
            font-size: medium;
            width: 150px;
            margin-left: 20px;
            margin-top: 50px;
        }

        h3 {
            color: white !important;
            margin-top: 50px !important;
            margin-left: 20px !important;
        }

        h1 {
            margin-left: 20px;
        }

        .subscribe-form {
            transform: scale(0.8);
        }


        .logo {
            font-size: large;
        }

        @@import url('https://fonts.googleapis.com/css2?family=Roboto:wght@100&display=swap');


        .modelimage {
            z-index: 999;
        }

    </style>
    <html lang="en">
    <head>
        <title>Contact V2</title>
        <meta charset="UTF-8">
        <meta name="viewport" content="width=device-width, initial-scale=1">

        <link rel="icon" type="image/png" href="/Form/images/icons/favicon.ico">

        <link rel="stylesheet" type="text/css" href="/Form/vendor/bootstrap/css/bootstrap.min.css">

        <link rel="stylesheet" type="text/css" href="/Form/fonts/font-awesome-4.7.0/css/font-awesome.min.css">

        <link rel="stylesheet" type="text/css" href="/Form/vendor/animate/animate.css">

        <link rel="stylesheet" type="text/css" href="/Form/vendor/css-hamburgers/hamburgers.min.css">

        <link rel="stylesheet" type="text/css" href="/Form/vendor/select2/select2.min.css">

        <link rel="stylesheet" type="text/css" href="/Form/css/util.css">
        <link rel="stylesheet" type="text/css" href="/Form/css/main.css">
    </head>
    <body>

        <img class="modelimage" src="/Form/images/balloonimage4.jpg" />
        <div class="sidenav">
            <h1><a href="#" class="logo">Activity Planner</a></h1>
            <a class="underline" href="/"><span class="fa fa-home mr-3"></span>Home</a>
            <a class="underline" href="/appointmentoverview"><span class="fa fa-sticky-note mr-3"></span>Appointments</a>
            <h3 class="h6 mb-3">Subscribe for newsletter</h3>
            <form action="#" class="subscribe-form">
                <div class="form-group d-flex">
                    <div class="icon"><span class="icon-paper-plane"></span></div>
                    <input type="text" class="form-control" placeholder="Enter Email Address">
                </div>
            </form>
            <div class="copyrights">
                Copyright ©2021 All rights reserved
            </div>
        </div>
        <div class="bg-contact2 scaleeverything" style="        background-image: url('/Form/images/');">
            <div class="container-contact2">
                <div class="wrap-contact2">
                    <EditForm Model="AttendeeToAdd" OnValidSubmit="AddAcquaintance" class="contact2-form validate-form">
                        <span class="contact2-form-title">
                        </span>

                        <div class="wrap-input2 validate-input">
                            <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@AttendeeToAdd.Data.Name"></InputText>
                            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => AttendeeToAdd.Data.Name)" />
                            <span class="focus-input2" data-placeholder="NAME"></span>
                        </div>

                        <div class="wrap-input2 validate-input">
                            <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@AttendeeToAdd.Data.Email"></InputText>
                            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => AttendeeToAdd.Data.Email)" />
                            <span class="focus-input2" data-placeholder="EMAIL"></span>
                        </div>

                        <div class="wrap-input2 validate-input">
                            <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@AttendeeToAdd.Data.PostalCode"></InputText>
                            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => AttendeeToAdd.Data.PostalCode)" />
                            <span class="focus-input2" data-placeholder="POSTAL CODE"></span>
                        </div>


                        <div class="wrap-input2 validate-input">
                            <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@AttendeeToAdd.Data.StreetName"></InputText>
                            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => AttendeeToAdd.Data.StreetName)" />
                            <span class="focus-input2" data-placeholder="STEET NAME"></span>
                        </div>


                        <div class="wrap-input2 validate-input">
                            <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@AttendeeToAdd.Data.StreetNumber"></InputText>
                            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => AttendeeToAdd.Data.StreetNumber)" />
                            <span class="focus-input2" data-placeholder="STREET NUMBER"></span>
                        </div>


                        <div class="wrap-input2 validate-input">
                            <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@AttendeeToAdd.Data.TelephoneNumber"></InputText>
                            <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => AttendeeToAdd.Data.TelephoneNumber)" />
                            <span class="focus-input2" data-placeholder="TELEPHONE NUMBER"></span>
                        </div>

                        <div class="container-contact2-form-btn">
                            <div class="wrap-contact2-form-btn">
                                <div class="contact2-form-bgbtn"></div>
                                <button type="submit" class="contact2-form-btn">
                                    Add acquaintance
                                </button>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>




    </body>
</html>
@code {
    [Inject]
    public ICurrentOrganizerDataService CurrentOrganizerDataService { get; set; }

    [Inject]
    public IOrganizerDataService OrganizerDataService { get; set; }

    [Inject]
    public IAttendeeDataService AttendeeDataService { get; set; }
    [Inject]
    public NavigationManager navmanager { get; set; }

    public OrganizerDTO CurrentOrganizer { get; set; } = new OrganizerDTO() { };

    public AttendeeDTO AttendeeToAdd { get; set; } = new AttendeeDTO();

    protected override async Task OnInitializedAsync()
    {
        CurrentOrganizer = await CurrentOrganizerDataService.GetCurrentUser();
    }

    public async void AddAcquaintance()
    {
        logger.LogInformation("acquaintance added");
        var allattendees = await AttendeeDataService.GetAll();
        if (allattendees.Any(a => a.Data.Email == AttendeeToAdd.Data.Email) || allattendees.Any(a => a.Data.PostalCode == AttendeeToAdd.Data.PostalCode || allattendees.Any(a => a.Data.TelephoneNumber == AttendeeToAdd.Data.TelephoneNumber)))
        {
            CurrentOrganizer.Acquaintances.Add(AttendeeToAdd);
            await OrganizerDataService.Update(CurrentOrganizer);
        }
        else
        {
            await AttendeeDataService.Add(AttendeeToAdd);
            CurrentOrganizer.Acquaintances.Add(AttendeeToAdd);
            await OrganizerDataService.Update(CurrentOrganizer);
            navmanager.NavigateTo("/succesfullyaddedacquaintance");
        }
    }
}
