@page "/addappointment"
@using ActivityPlannerBlazor.Client.Interfaces;
@using ActivityPlannerBlazor.Shared.DTOS;
@using Microsoft.AspNetCore.Components;
@using System;
@using System.Collections.Generic;
@using System.Linq;
@using System.Threading.Tasks;

<style>
    body {
        overflow-x: hidden;
        transform: scale(1.03);
    }

    nav {
        transform: translateY(15px);
    }

    @@media screen and (min-width: 1367px) {

        .scaleeverything {
            width: 105% !important;
            position: relative !important;
            transform: scale(1.2);
            /*         transform: translate(-50px,-19px);
        */
        }

        .wrap-contact2 {
            transform: scale(0.7) !important;
        }
    }

    @@media screen and (max-width: 1367px) {

        .scaleeverything {
            width: 105% !important;
            position: relative !important;
            transform: scale(1.05);
            /*         transform: translate(-50px,-19px);
        */
        }

        .wrap-contact2 {
            transform: scale(0.65) !important;
        }
    }
</style>
<html lang="en">
<head>
    <title>Contact V2</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <link rel="icon" type="image/png" href="/Form/images/icons/favicon.ico">

    <link rel="stylesheet" type="text/css" href="/Form/vendor/bootstrap/css/bootstrap.min.css">

    <link rel="stylesheet" type="text/css" href="/Form/fonts/font-awesome-4.7.0/css/font-awesome.min.css">

    <link rel="stylesheet" type="text/css" href="/Form/vendor/animate/animate.css">

    <link rel="stylesheet" type="text/css" href="/Form/vendor/css-hamburgers/hamburgers.min.css">

    <link rel="stylesheet" type="text/css" href="/Form/vendor/select2/select2.min.css">

    <link rel="stylesheet" type="text/css" href="/Form/css/util.css">
    <link rel="stylesheet" type="text/css" href="/Form/css/main.css">
</head>
<body>

    <div class="bg-contact2 scaleeverything" style="background-image: url('/Form/images/bg-01.jpg');">
        <div class="container-contact2">
            <div class="wrap-contact2">
                <EditForm Model="CurrentAppointment" OnValidSubmit="AddModel" class="contact2-form validate-form">
                    <span class="contact2-form-title">
                        Fill in information
                    </span>

                    <div class="wrap-input2 validate-input">
                        <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@CurrentAppointment.Name"></InputText>
                        <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => CurrentAppointment.Name)" />
                        <span class="focus-input2" data-placeholder="NAME"></span>
                    </div>

                    <div class="wrap-input2 validate-input">
                        <InputText id="initial" class="input2" type="text" name="name" @bind-Value="@CurrentAppointment.Description"></InputText>
                        <ValidationMessage class="offset-sm-3 col-sm-8" For="@(() => CurrentAppointment.Description)" />
                        <span class="focus-input2" data-placeholder="DESCRIPTION"></span>
                    </div>

                    <div class="container-contact2-form-btn">
                        <div class="wrap-contact2-form-btn">
                            <div class="contact2-form-bgbtn"></div>
                            <button class="contact2-form-btn">
                                Add acquaintance
                            </button>
                        </div>
                    </div>
                </EditForm>
            </div>
        </div>
    </div>




</body>
</html>

@code {
    [Inject]
    public ICurrentOrganizerDataService CurrentOrganizerDataService { get; set; }

    [Inject]
    public IOrganizerDataService OrganizerDataService { get; set; }

    [Inject]
    public IAppointmentDataService AppointmentDataService { get; set; }

    public OrganizerDTO CurrentOrganizer { get; set; } = new OrganizerDTO() { };

    public AppointmentDTO CurrentAppointment { get; set; } = new AppointmentDTO() { };

    protected override async Task OnInitializedAsync()
    {
        CurrentOrganizer = await CurrentOrganizerDataService.GetCurrentUser();
    }

    public async void AddModel()
    { 
    
    }
}
